#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FaceRecognition.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Faces")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHISTORY(HISTORY instance);
    partial void UpdateHISTORY(HISTORY instance);
    partial void DeleteHISTORY(HISTORY instance);
    partial void InsertSTRANGER(STRANGER instance);
    partial void UpdateSTRANGER(STRANGER instance);
    partial void DeleteSTRANGER(STRANGER instance);
    partial void InsertPERSON(PERSON instance);
    partial void UpdatePERSON(PERSON instance);
    partial void DeletePERSON(PERSON instance);
    partial void InsertPOSITION(POSITION instance);
    partial void UpdatePOSITION(POSITION instance);
    partial void DeletePOSITION(POSITION instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::FaceRecognition.Properties.Settings.Default.FacesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<HISTORY> HISTORies
		{
			get
			{
				return this.GetTable<HISTORY>();
			}
		}
		
		public System.Data.Linq.Table<STRANGER> STRANGERs
		{
			get
			{
				return this.GetTable<STRANGER>();
			}
		}
		
		public System.Data.Linq.Table<PERSON> PERSONs
		{
			get
			{
				return this.GetTable<PERSON>();
			}
		}
		
		public System.Data.Linq.Table<POSITION> POSITIONs
		{
			get
			{
				return this.GetTable<POSITION>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HISTORY")]
	public partial class HISTORY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_History;
		
		private string _ID_Person;
		
		private System.Nullable<System.DateTime> _Time;
		
		private System.Data.Linq.Binary _Recognized;
		
		private EntityRef<PERSON> _PERSON;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_HistoryChanging(string value);
    partial void OnID_HistoryChanged();
    partial void OnID_PersonChanging(string value);
    partial void OnID_PersonChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnRecognizedChanging(System.Data.Linq.Binary value);
    partial void OnRecognizedChanged();
    #endregion
		
		public HISTORY()
		{
			this._PERSON = default(EntityRef<PERSON>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_History", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_History
		{
			get
			{
				return this._ID_History;
			}
			set
			{
				if ((this._ID_History != value))
				{
					this.OnID_HistoryChanging(value);
					this.SendPropertyChanging();
					this._ID_History = value;
					this.SendPropertyChanged("ID_History");
					this.OnID_HistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Person", DbType="NChar(10)")]
		public string ID_Person
		{
			get
			{
				return this._ID_Person;
			}
			set
			{
				if ((this._ID_Person != value))
				{
					if (this._PERSON.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PersonChanging(value);
					this.SendPropertyChanging();
					this._ID_Person = value;
					this.SendPropertyChanged("ID_Person");
					this.OnID_PersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recognized", DbType="Binary(50)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Recognized
		{
			get
			{
				return this._Recognized;
			}
			set
			{
				if ((this._Recognized != value))
				{
					this.OnRecognizedChanging(value);
					this.SendPropertyChanging();
					this._Recognized = value;
					this.SendPropertyChanged("Recognized");
					this.OnRecognizedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PERSON_HISTORY", Storage="_PERSON", ThisKey="ID_Person", OtherKey="ID_Person", IsForeignKey=true)]
		public PERSON PERSON
		{
			get
			{
				return this._PERSON.Entity;
			}
			set
			{
				PERSON previousValue = this._PERSON.Entity;
				if (((previousValue != value) 
							|| (this._PERSON.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PERSON.Entity = null;
						previousValue.HISTORies.Remove(this);
					}
					this._PERSON.Entity = value;
					if ((value != null))
					{
						value.HISTORies.Add(this);
						this._ID_Person = value.ID_Person;
					}
					else
					{
						this._ID_Person = default(string);
					}
					this.SendPropertyChanged("PERSON");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STRANGER")]
	public partial class STRANGER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private System.Nullable<System.DateTime> _Time;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    #endregion
		
		public STRANGER()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PERSON")]
	public partial class PERSON : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_Person;
		
		private string _Name;
		
		private string _Address;
		
		private System.Nullable<bool> _Sex;
		
		private string _ID_Position;
		
		private string _SSc;
		
		private string _Picture;
		
		private EntitySet<HISTORY> _HISTORies;
		
		private EntityRef<POSITION> _POSITION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PersonChanging(string value);
    partial void OnID_PersonChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSexChanging(System.Nullable<bool> value);
    partial void OnSexChanged();
    partial void OnID_PositionChanging(string value);
    partial void OnID_PositionChanged();
    partial void OnSScChanging(string value);
    partial void OnSScChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    #endregion
		
		public PERSON()
		{
			this._HISTORies = new EntitySet<HISTORY>(new Action<HISTORY>(this.attach_HISTORies), new Action<HISTORY>(this.detach_HISTORies));
			this._POSITION = default(EntityRef<POSITION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Person", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_Person
		{
			get
			{
				return this._ID_Person;
			}
			set
			{
				if ((this._ID_Person != value))
				{
					this.OnID_PersonChanging(value);
					this.SendPropertyChanging();
					this._ID_Person = value;
					this.SendPropertyChanged("ID_Person");
					this.OnID_PersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NChar(10)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit")]
		public System.Nullable<bool> Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Position", DbType="NChar(10)")]
		public string ID_Position
		{
			get
			{
				return this._ID_Position;
			}
			set
			{
				if ((this._ID_Position != value))
				{
					if (this._POSITION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PositionChanging(value);
					this.SendPropertyChanging();
					this._ID_Position = value;
					this.SendPropertyChanged("ID_Position");
					this.OnID_PositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSc", DbType="NChar(10)")]
		public string SSc
		{
			get
			{
				return this._SSc;
			}
			set
			{
				if ((this._SSc != value))
				{
					this.OnSScChanging(value);
					this.SendPropertyChanging();
					this._SSc = value;
					this.SendPropertyChanged("SSc");
					this.OnSScChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NChar(10)")]
		public string Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PERSON_HISTORY", Storage="_HISTORies", ThisKey="ID_Person", OtherKey="ID_Person")]
		public EntitySet<HISTORY> HISTORies
		{
			get
			{
				return this._HISTORies;
			}
			set
			{
				this._HISTORies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POSITION_PERSON", Storage="_POSITION", ThisKey="ID_Position", OtherKey="ID_Position", IsForeignKey=true)]
		public POSITION POSITION
		{
			get
			{
				return this._POSITION.Entity;
			}
			set
			{
				POSITION previousValue = this._POSITION.Entity;
				if (((previousValue != value) 
							|| (this._POSITION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._POSITION.Entity = null;
						previousValue.PERSONs.Remove(this);
					}
					this._POSITION.Entity = value;
					if ((value != null))
					{
						value.PERSONs.Add(this);
						this._ID_Position = value.ID_Position;
					}
					else
					{
						this._ID_Position = default(string);
					}
					this.SendPropertyChanged("POSITION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HISTORies(HISTORY entity)
		{
			this.SendPropertyChanging();
			entity.PERSON = this;
		}
		
		private void detach_HISTORies(HISTORY entity)
		{
			this.SendPropertyChanging();
			entity.PERSON = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.POSITION")]
	public partial class POSITION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID_Position;
		
		private string _Name;
		
		private EntitySet<PERSON> _PERSONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PositionChanging(string value);
    partial void OnID_PositionChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public POSITION()
		{
			this._PERSONs = new EntitySet<PERSON>(new Action<PERSON>(this.attach_PERSONs), new Action<PERSON>(this.detach_PERSONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Position", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID_Position
		{
			get
			{
				return this._ID_Position;
			}
			set
			{
				if ((this._ID_Position != value))
				{
					this.OnID_PositionChanging(value);
					this.SendPropertyChanging();
					this._ID_Position = value;
					this.SendPropertyChanged("ID_Position");
					this.OnID_PositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="POSITION_PERSON", Storage="_PERSONs", ThisKey="ID_Position", OtherKey="ID_Position")]
		public EntitySet<PERSON> PERSONs
		{
			get
			{
				return this._PERSONs;
			}
			set
			{
				this._PERSONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PERSONs(PERSON entity)
		{
			this.SendPropertyChanging();
			entity.POSITION = this;
		}
		
		private void detach_PERSONs(PERSON entity)
		{
			this.SendPropertyChanging();
			entity.POSITION = null;
		}
	}
}
#pragma warning restore 1591
